https://v3.ru.vuejs.org/ru/guide/introduction.html

https://vuejs.org/examples/#counter
https://v3.ru.vuejs.org/ru/examples/grid-component.html - table example

cource:
https://www.youtube.com/watch?v=XzLuMtDelGk


virtual dom - изменения накапливаются в нём, затем пачкой ставятся на оригинальное дерево
модель - данные компонента (счётчик,переменная,count)

https://v3.ru.vuejs.org/

*used Libraries
 https://github.com/vueform/toggle

npm install -g @vue/cli

vue create .->
munual select*
(*)Babel
(*)Router
(*)Vuex

version vue3
historyMode: Y

In package JSON

presets: N

Package.json

serve - запускает приложение в режиме разработки
build - нужен для продакшн сборки

компонент - обычный js обьект

{{}} - интерполяция. Добавляется в template

<strong> - выделение

v-on:click="addLike"> - старый вариант отработки метода
@click="addDisLike"> - новое

инструмент разработчика - Vue.js devtools (betta version to vue3)
https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=en

hk - form



v-bind:value="title" - связываение элемента title из data с элементом imput на форме.
@input="inputTitle" - отслеживание изменений в поле метод inputTitle в methods

            inputTitle(event){
                this.title = event.target.value;
            }
			Сохранение внесённых в поле данных в переменную title
			!!!!это вариант через метод

v-bind:value="title"
@input="title = $event.target.value"
оптимизированный вариант "напрямую"

по стандарту при нажатии на "создать" браузер обновляет страницу и данные пропадут
чтобы этого избежать нужно

            createPost(event) {
                event.stopPropagation()
                event.preventDefault()

либо повесить на форму:
<form @submit.prevent>
** отключает действия браузера по умолчанию

@ - ссылка на папку src

в скриптах импортируется компонент
import PostForm from "@/components/PostForm";

затем регистрируется в export default:
        components: {
            PostList, PostForm
        },

инициализация ожидаемых входящих данных для компонента для PostList
    export default {
        props: {
            posts: {
                type: Array,
                required: true
            }
        }
    }
передача данных компоненту
<post-list v-bind:posts = "posts"/>
или коротная запись
<post-list :posts = "posts"/>

Пропсы в дочернем компоненте изменять нельзя!
данные изменяются только в родителе

модель данных в PostForm
        data(){
            return{
                post:{
                    title: '',
                    body: ''
                }
            }
        }
и соответственно привязываем двухстороннее связываение к полям обьекта post
                v-bind:value="post.title"
                @input="post.title = $event.target.value"

или связывание через v-model
 		v-model="post.title"

возвращение данных из ребёнка в родитель.
напрямую - невозможно
		генерируем событие на которое может подписаться родитель
		this.$emit('Название события', аргументы...)

example

          createPost() {
              this.post.id = Date.now();
              this.$emit('create', this.post)
              this.post = {
                  title: '',
                  body: ''
              }
          }
метод в котором присваиваем новому посту id по дате
генерируем событие которое будет перехватывать родитель
очищаем поля на форме

для родителя:
        <post-form/>
        <post-list
                :posts="posts"
                @create="createPost"
        />
подписываемся на событие (@create) из this.$emit('create', this.post)
и обозначаем что выполнится метод createPost

justify-content: space-between; отсутствие прилипания элементов

папка UI для однотипных элементов типа кнопка

<slot></slot> - помещение данных в элемент. дефолтный. могут быть именованные


        <my-button
                class="btn"
                style="align-self: flex-end"
                @click="createPost">
            создать
        </my-button>

любые свойства прописаные как показано выше style="align-self: flex-end" - прописываются для коренного элемента компонента

58.20


v-model: value="post.title" - именная реализация input 
modelValue -> value

58.44 ОЧ ВАЖНО

-----------
//PostItem
 <my-button
    @click="emit('remove', post)"
  >удалить</my-button>
создаём событие по нажатию прокидывая наверх конкретный жлемент post

//PostList
@remove="$emit('remove', post)"
слушаем событие и передаём его выше

//App
    removePost(post){
        this.posts = this.posts.filter(p => p.id !== post.id )
    }

filter - возвращает новый массив в который сохраняем все элементы кроме элемента с id удаляемого элемента

v-if v-else
отрисовка того или иного элемента

v-show="условие" - отрисовываются все элементы,но показывается только удовлетворяющий условию

<div class="dialog" v-if="show" @click.stop="hideDialog">
        <div @click.stop class="dialog__content">
            <slot></slot>
        </div>
</div>
@click.stop - предотвращает закрытие при нажатии на элементы компонента

==========================================================
.trim - Модификатор. убирает пробелы вначале и в конце 

<template>
		<input type="text" v-model.trim="modificatorValue">
</template>

<script>	
...
modificatorValue: ''
...
</script>

*Модификаторы можно добавлять по цепочке через "."

.number сразу прриводит инпут к числовому значению
==========================================================
тестовый набор, огрнаниченный 10ю
https://jsonplaceholder.typicode.com/posts?_limit=10

npm i axios

<my-button @click="fetchPosts"> Get Posts </my-button>
method:

            async fetchPosts(){
                try{
                    const response = await axios.get('https://jsonplaceholder.typicode.com/posts?_limit=10');
                    console.log(response);
                }catch (e) {
                    alert('Exception')
                }
            }
			
веб хук Mointed - в нём можно делать запрос на сервер
	*beforeUpdate - перед обновлением
	*updated - после обновления
	
Очистка
	beforeUnmount
	unmounted

задержка

            async fetchPosts(){
                try{
                    setTimeout(async () => {
						......
                    }, 1000 )
                }catch (e) {
                    alert('Exception')
                } finally{
                    this.isPostsLoading = false;
                }
            },	

justify-content: space-between; <!-- кнопка и выпадающий список друг на против друга -->

default: () => [] для пустых массивов рекомендуется использовать стрелочную функцию	

============================
select:
watch - отрабатывает при изменении модели (выбрал какой-то элемент списка) применяетсяк любой модели
	  <my-select
          v-model="selectedSort"
          :options="sortOptions"
      />
	    watch: {
			selectedSort(newValue){
        console.log(newValue);
      }

------глубокое отслеживание обьекта ( реагировать на каждое изменение вложенных обьектов) !!!!!!!!
      watch: {
          post: {
            handler(newVal) {
              console.log(newVal)
            },
            deep: true
          }
      }
============================
	localeCompare - функция для сравнения строк
	
	this.posts.sort((post1, post2) => {
          return post1[this.selectedSort]?.localeCompare(post2[this.selectedSort])
        })
		
Computed:
		
return [...this.posts] - разворачивание нового массива без изменения оригинала


return [...this.posts].sort((post1, post2) => post1[this.selectedSort]?.localeCompare(post2[this.selectedSort]))
--
******************


передача данных ребёнок -> родитель - 0:40:00
сортировка - 1:25:00
1:30:00


      <p-checkbox
          :init-value="unit.notify">
      </p-checkbox>

////////
<!--        <account-row-->
<!--            v-for="account in accounts"-->
<!--            :key="account.name"-->
<!--            :account="account"-->
<!--            @remove="$emit('remove', account)"-->
<!--        />-->
////////
